name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    runs-on: windows-latest

    env:
      EC2_HOST_WINDOWS: ${{ vars.EC2_HOST_WINDOWS }}
      EC2_ADMIN_PASSWORD: ${{ secrets.EC2_ADMIN_PASSWORD }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build and Publish Artifact
        shell: pwsh
        run: |
          dotnet restore LoginApi.csproj
          dotnet publish LoginApi.csproj -c Release -o ./publish

      - name: Upload publish directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: loginapi-publish
          path: ./publish
          retention-days: 1

      - name: Install Posh-SSH Module
        shell: pwsh
        run: |
          Install-Module -Name Posh-SSH -Force -Scope CurrentUser

      - name: Deploy and Configure EC2
        shell: pwsh
        run: |
          $remoteHost = $env:EC2_HOST_WINDOWS
          if (-not $remoteHost) { throw "‚ùå EC2_HOST_WINDOWS is not set." }

          $username = "Administrator"
          $password = $env:EC2_ADMIN_PASSWORD
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

          Write-Host "üîê Connecting to EC2 at $remoteHost..."
          $session = New-SSHSession -HostName $remoteHost -Credential $credential -AcceptKey -ConnectionTimeout 30000 -ErrorAction Stop

          $deployPath = "C:\inetpub\wwwroot\LoginApi"
          $artifactPath = "C:\Artifacts"
          $artifactZip = "$artifactPath\loginapi.zip"
          $tempExtract = "C:\Temp\LoginApiExtract"
          $appPool = "LoginApiAppPool"
          $GhToken = $env:GH_TOKEN
          $RepoOwner = "${{ github.repository_owner }}"
          $RepoName = "${{ github.event.repository.name }}"
          $RunId = "${{ github.run_id }}"
          $ArtifactName = "loginapi-publish"

          $finalCommand = @"
          try {
              # Install Chocolatey if missing
              if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
                  Set-ExecutionPolicy Bypass -Scope Process -Force
                  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
                  Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
              }

              # Install .NET 8.0 SDK
              choco install dotnet-sdk --version=8.0.100 -y
              choco install dotnet-runtime --version=8.0.0 -y

              # Install PostgreSQL
              choco install postgresql --version=15.5 -y

              # Create artifact path
              if (-not (Test-Path "$artifactPath")) { New-Item -ItemType Directory -Path "$artifactPath" -Force }

              # Download artifact
              $URL = "https://api.github.com/repos/$RepoOwner/$RepoName/actions/runs/$RunId/artifacts"
              $HEADERS = @{ Authorization = "token $GhToken"; Accept = "application/vnd.github.v3+json" }
              $RESPONSE = Invoke-RestMethod -Uri $URL -Headers $HEADERS
              $ARTIFACT = $RESPONSE.artifacts | Where-Object { $_.name -eq "$ArtifactName" }
              if (-not $ARTIFACT) { throw "Artifact not found." }
              $DOWNLOAD_URL = $ARTIFACT.archive_download_url
              Invoke-WebRequest -Uri $DOWNLOAD_URL -Headers $HEADERS -OutFile "$artifactZip"

              # Extract artifact
              if (-not (Test-Path "$tempExtract")) { New-Item -ItemType Directory -Path "$tempExtract" -Force }
              Add-Type -AssemblyName System.IO.Compression.FileSystem
              [System.IO.Compression.ZipFile]::ExtractToDirectory("$artifactZip", "$tempExtract", $true)

              # Copy files to deploy path
              $dllPath = Get-ChildItem -Path "$tempExtract" -Recurse -Filter "LoginApi.dll" | Select-Object -First 1
              if ($dllPath) {
                  $sourceFolder = $dllPath.Directory.FullName
                  if (-not (Test-Path "$deployPath")) { New-Item -ItemType Directory -Path "$deployPath" -Force }
                  Copy-Item -Path "$sourceFolder\*" -Destination "$deployPath" -Recurse -Force
              } else {
                  throw "LoginApi.dll not found in extracted artifact."
              }

              # Setup IIS
              Import-Module WebAdministration
              if (-not (Test-Path IIS:\AppPools\$appPool)) {
                  New-WebAppPool -Name "$appPool"
                  Set-ItemProperty IIS:\AppPools\$appPool -Name "managedRuntimeVersion" -Value ""
              }
              if (-not (Test-Path IIS:\Sites\Default Web Site\LoginApi)) {
                  New-WebApplication -Site "Default Web Site" -Name "LoginApi" -PhysicalPath "$deployPath" -ApplicationPool "$appPool"
              }
              Restart-WebAppPool -Name "$appPool"

              # Run migration
              Push-Location "$deployPath"
              if (Get-Command dotnet -ErrorAction SilentlyContinue) {
                  dotnet LoginApi.dll migrate
              } else {
                  throw "dotnet CLI not available after installation."
              }
              Pop-Location
          } catch {
              Write-Host "‚ùå Deployment error: $($_.Exception.Message)"
          }
          "@

          $response = Invoke-SSHCommand -SshSession $session -Command $finalCommand
          Write-Host "üîß Remote output:"
          $response.Output
          Write-Host "üîö Exit status: $($response.ExitStatus)"

          Remove-SSHSession -SshSession $session
