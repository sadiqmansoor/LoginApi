name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    runs-on: windows-latest

    steps:
      # ───── Checkout Code ─────
      - name: Checkout repository
        uses: actions/checkout@v3

      # ───── Setup .NET SDK ─────
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # ───── Restore Packages ─────
      - name: Restore packages
        run: dotnet restore LoginApi.csproj

      # ───── Build Project ─────
      - name: Build project
        run: dotnet build LoginApi.csproj --configuration Release

      # ───── Publish Project ─────
      - name: Publish project
        run: dotnet publish LoginApi.csproj -c Release -o ./publish

      # ───── Create and Upload the Artifact ─────
      - name: Create and upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: loginapi-publish
          path: ./publish

      # ───── SSH and deploy to EC2 ─────
      - name: SSH and deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.EC2_HOST_WINDOWS }}
          username: ${{ vars.EC2_USER_WINDOWS }}
          key: ${{ secrets.EC2_SSH_KEY_WINDOWS }}
          script_type: powershell
          script: |
            # Set up the deployment path on the server
            $deployPath = "C:\\inetpub\\wwwroot\\LoginApi"
            if (-not (Test-Path -Path $deployPath)) {
                New-Item -Path $deployPath -ItemType Directory
            }

            # ───── Download the build artifact from GitHub ─────
            $env:GITHUB_TOKEN = "${{ secrets.GITHUB_TOKEN }}"
            $runId = "${{ github.run_id }}"
            $repo = "${{ github.repository }}"
            
            $downloadUrl = "https://api.github.com/repos/$repo/actions/runs/$runId/artifacts"
            
            $headers = @{
                "Authorization" = "token $env:GITHUB_TOKEN"
                "Accept" = "application/vnd.github.v3+json"
            }
            
            $artifacts = Invoke-RestMethod -Uri $downloadUrl -Headers $headers
            
            $artifactName = "loginapi-publish"
            $artifact = $artifacts.artifacts | Where-Object { $_.name -eq $artifactName }
            
            if ($null -ne $artifact) {
                $download = $artifact.archive_download_url
                Write-Host "Downloading artifact from: $download"
                
                # Download the artifact and save it
                Invoke-WebRequest -Uri $download -Headers $headers -OutFile "$deployPath\loginapi.zip"
            } else {
                Write-Host "Artifact '$artifactName' not found."
                exit 1
            }

            # ───── Unzip and Deploy ─────
            Expand-Archive -Path "$deployPath\loginapi.zip" -DestinationPath $deployPath -Force
            Remove-Item -Path "$deployPath\loginapi.zip"

            # ───── Install PostgreSQL (if not present) ─────
            $pg_installer = "postgresql-16.1-1-windows-x64.exe"
            $pg_path = "C:\Program Files\PostgreSQL\16\bin\psql.exe"
            if (-not (Test-Path -Path $pg_path)) {
                Write-Host "PostgreSQL not found. Installing..."
                Invoke-WebRequest -Uri "https://www.postgresql.org/media/frs/download.php?file=postgresql-16.1-1-windows-x64.exe" -OutFile $pg_installer
                Start-Process -FilePath $pg_installer -ArgumentList "/S /NOCREATECLUSTER /NOCREATESERVICE /SERVICEACCOUNT=NT AUTHORITY\NetworkService /SERVICEPASSWORD= /INSTALLDIR=`"C:\\Program Files\\PostgreSQL\\16`"" -Wait
            }

            # ───── Create PostgreSQL User & DB (if needed) ─────
            & "C:\Program Files\PostgreSQL\16\bin\psql.exe" -c "CREATE USER loginuser WITH PASSWORD 'securepassword';" -d "template1" -U "postgres" -ErrorAction SilentlyContinue
            & "C:\Program Files\PostgreSQL\16\bin\psql.exe" -c "CREATE DATABASE logindb OWNER loginuser;" -d "template1" -U "postgres" -ErrorAction SilentlyContinue

            # ───── Stop Application Pool ─────
            Import-Module WebAdministration
            Stop-WebAppPool -Name "LoginApi" -ErrorAction SilentlyContinue

            # ───── Apply EF Core Migrations ─────
            cd C:\inetpub\wwwroot\LoginApi
            dotnet tool install --global dotnet-ef --no-restore
            dotnet ef database update --project LoginApi.csproj

            # ───── Start Application Pool ─────
            Start-WebAppPool -Name "LoginApi"
