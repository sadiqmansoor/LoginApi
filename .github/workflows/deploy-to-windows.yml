name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    runs-on: windows-latest

    steps:
      # ───── Checkout Code ─────
      - name: Checkout repository
        uses: actions/checkout@v3

      # ───── Setup .NET SDK ─────
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # ───── Restore Packages ─────
      - name: Restore packages
        run: dotnet restore LoginApi.csproj

      # ───── Build Project ─────
      - name: Build project
        run: dotnet build LoginApi.csproj --configuration Release

      # ───── Publish Project ─────
      - name: Publish project
        run: dotnet publish LoginApi.csproj -c Release -o ./publish

      # ───── Zip Published Output ─────
      - name: Zip published output
        run: Compress-Archive -Path publish\* -DestinationPath loginapi.zip

      # ───── Upload to EC2 ─────
      - name: Upload zip to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ vars.EC2_HOST_WINDOWS }}
          username: ${{ vars.EC2_USER_WINDOWS }}
          key: ${{ secrets.EC2_SSH_KEY_WINDOWS }}
          source: loginapi.zip
          target: C:/Users/Administrator/Desktop
          # Note: The target path is a Windows path.
          # The appleboy/scp-action might handle this correctly, but if not,
          # a Powershell script will be needed in a later step to copy the file.

      # ───── SSH into EC2 and Deploy ─────
      - name: SSH and deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.EC2_HOST_WINDOWS }}
          username: ${{ vars.EC2_USER_WINDOWS }}
          key: ${{ secrets.EC2_SSH_KEY_WINDOWS }}
          script_type: powershell
          script: |
            # ───── Install PostgreSQL (if not present) ─────
            $pg_installer = "postgresql-16.1-1-windows-x64.exe"
            $pg_path = "C:\Program Files\PostgreSQL\16\bin\psql.exe"
            if (-not (Test-Path -Path $pg_path)) {
                Write-Host "PostgreSQL not found. Installing..."
                Invoke-WebRequest -Uri "https://www.postgresql.org/media/frs/download.php?file=postgresql-16.1-1-windows-x64.exe" -OutFile $pg_installer
                Start-Process -FilePath $pg_installer -ArgumentList "/S /NOCREATECLUSTER /NOCREATESERVICE /SERVICEACCOUNT=NT AUTHORITY\NetworkService /SERVICEPASSWORD= /INSTALLDIR=`"C:\\Program Files\\PostgreSQL\\16`"" -Wait
            }

            # ───── Create PostgreSQL User & DB (if needed) ─────
            & "C:\Program Files\PostgreSQL\16\bin\psql.exe" -c "CREATE USER loginuser WITH PASSWORD 'securepassword';" -d "template1" -U "postgres" -ErrorAction SilentlyContinue
            & "C:\Program Files\PostgreSQL\16\bin\psql.exe" -c "CREATE DATABASE logindb OWNER loginuser;" -d "template1" -U "postgres" -ErrorAction SilentlyContinue

            # ───── Stop Application Pool ─────
            Import-Module WebAdministration
            Stop-WebAppPool -Name "LoginApi" -ErrorAction SilentlyContinue

            # ───── Unzip and Deploy ─────
            Expand-Archive -Path "C:\inetpub\wwwroot\LoginApi\loginapi.zip" -DestinationPath "C:\inetpub\wwwroot\LoginApi" -Force
            Remove-Item -Path "C:\inetpub\wwwroot\LoginApi\loginapi.zip"

            # ───── Apply EF Core Migrations ─────
            cd C:\inetpub\wwwroot\LoginApi
            dotnet tool install --global dotnet-ef --no-restore
            dotnet ef database update --project LoginApi.csproj

            # ───── Start Application Pool ─────
            Start-WebAppPool -Name "LoginApi"
