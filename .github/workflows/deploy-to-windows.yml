name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    # Use the Windows runner
    runs-on: windows-latest
    
    steps:
      # 1. Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Setup .NET SDK 8.x
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 3. Restore, Build, and Publish the project
      - name: Build, Publish, and Compress Artifact
        shell: pwsh
        run: |
          dotnet restore LoginApi.csproj
          # Publish the application to the ./publish directory
          dotnet publish LoginApi.csproj -c Release -o ./publish
          # Create a single zip file for easier, atomic transfer via SCP
          Compress-Archive -Path ./publish/* -DestinationPath ./loginapi.zip -Force

      # The upload-artifact step is no longer strictly necessary for deployment
      # but is kept here for review purposes if needed.
      - name: Upload artifact for review
        uses: actions/upload-artifact@v4
        with:
          name: loginapi-publish
          path: ./loginapi.zip

      # 4. Set up the SSH Authentication agent
      # This step makes the private key available to the native 'ssh' and 'scp' commands.
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY_WINDOWS }}

      # 5. Native File Transfer (SCP)
      # We use the 'bash' shell to execute the standard scp command for file transfer.
      - name: Transfer Files via Native SCP
        shell: bash
        run: |
          REMOTE_HOST="${{ vars.EC2_HOST_WINDOWS }}"
          DEPLOY_PATH='C:/inetpub/wwwroot/LoginApi'
          
          # Use '-o StrictHostKeyChecking=no' to avoid interactive host key prompt
          # The key is automatically used by the ssh-agent
          # Note: The target path is quoted to handle spaces correctly.
          scp -o StrictHostKeyChecking=no ./loginapi.zip Administrator@$REMOTE_HOST:"$DEPLOY_PATH/loginapi.zip"
          echo "File transfer complete."

      # 6. Run remote command to extract files and manage the application
      # We use the 'bash' shell to execute the 'ssh' command, which runs a PowerShell script remotely.
      - name: Extract Files and Restart Application via Native SSH
        shell: bash
        run: |
          REMOTE_HOST="${{ vars.EC2_HOST_WINDOWS }}"
          DEPLOY_PATH="C:/inetpub/wwwroot/LoginApi"
          ZIP_FILE="$DEPLOY_PATH/loginapi.zip"
          APP_POOL="LoginApiAppPool"

          # This entire PowerShell script is built as a string, requiring heavy escaping 
          # to ensure it executes correctly inside the remote SSH command.
          REMOTE_COMMAND="powershell.exe -ExecutionPolicy Bypass -Command \"
              # Create directory if it doesn't exist
              if (-not (Test-Path -Path \$DEPLOY_PATH)) { New-Item -ItemType Directory -Path \$DEPLOY_PATH -Force };
              
              # Extract the zip file (overwrites existing files)
              Expand-Archive -Path \$ZIP_FILE -DestinationPath \$DEPLOY_PATH -Force;
              Remove-Item -Path \$ZIP_FILE;

              # Restart Application Pool (Requires IIS WebAdministration Module on EC2)
              Import-Module WebAdministration; 
              Restart-WebAppPool -Name \$APP_POOL -Force;
              Write-Host 'Deployment successful and App Pool restarted.'\""

          # Execute the remote command using native SSH
          ssh -o StrictHostKeyChecking=no Administrator@$REMOTE_HOST "$REMOTE_COMMAND"
