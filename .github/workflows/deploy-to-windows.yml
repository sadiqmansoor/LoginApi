name: CI/CD for LoginApi to Windows EC2
on:
  push:
    branches: [ main ]
jobs:
  deploy-loginapi-windows:
    runs-on: windows-latest
    steps:
      # ───── Checkout Code ─────
      - name: Checkout repository
        uses: actions/checkout@v3

      # ───── Setup .NET SDK ─────
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # ───── Restore Packages ─────
      - name: Restore packages
        run: dotnet restore LoginApi.csproj
        shell: pwsh

      # ───── Build Project ─────
      - name: Build project
        run: dotnet build LoginApi.csproj --configuration Release
        shell: pwsh

      # ───── Publish Project ─────
      - name: Publish project
        run: dotnet publish LoginApi.csproj -c Release -o ./publish
        shell: pwsh

      # ───── Upload artifacts ─────
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: loginapi-publish
          path: ./publish

      # ───── Setup SSH agent ─────
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY_WINDOWS }}

      # ───── Deploy via ssh with PowerShell script ─────
      - name: Deploy to Windows EC2
        shell: pwsh
           run:|
           $ec2User = "${{ vars.EC2_USER_WINDOWS }}"
           $ec2Host = "${{ vars.EC2_HOST_WINDOWS }}"
           $deployPath = "C:\\inetpub\\wwwroot\\LoginApi"

           Invoke-Command -ComputerName $ec2Host -Credential (New-Object System.Management.Automation.PSCredential($ec2User, (ConvertTo-SecureString ${{ secrets.EC2_PASSWORD_WINDOWS }} -AsPlainText -Force))) -ScriptBlock { Invoke-Expression $using:psScript }

           ssh -o StrictHostKeyChecking=no $ec2User@$ec2Host powershell -Command $psScript


          # Download artifact zip using GitHub API
          $env:GITHUB_TOKEN = "${{ secrets.GITHUB_TOKEN }}"
          $runId = "${{ github.run_id }}"
          $repo = "${{ github.repository }}"

          $downloadUrl = "https://api.github.com/repos/$repo/actions/runs/$runId/artifacts"
          $headers = @{
            "Authorization" = "token $env:GITHUB_TOKEN"
            "Accept" = "application/vnd.github.v3+json"
          }
          $artifacts = Invoke-RestMethod -Uri $downloadUrl -Headers $headers
          $artifactName = "loginapi-publish"
          $artifact = $artifacts.artifacts | Where-Object { $_.name -eq $artifactName }
          if ($null -ne $artifact) {
            $download = $artifact.archive_download_url
            Invoke-WebRequest -Uri $download -Headers $headers -OutFile "$using:deployPath\\loginapi.zip"
          } else {
            Write-Host "Artifact '$artifactName' not found."
            exit 1
          }

          # Unzip artifact
          Expand-Archive -Path "$using:deployPath\\loginapi.zip" -DestinationPath $using:deployPath -Force
          Remove-Item -Path "$using:deployPath\\loginapi.zip"

          # PostgreSQL installation
          $pgInstaller = "postgresql-16.1-1-windows-x64.exe"
          $pgPath = "C:\\Program Files\\PostgreSQL\\16\\bin\\psql.exe"
          if (-not (Test-Path -Path $pgPath)) {
            Invoke-WebRequest -Uri "https://get.enterprisedb.com/postgresql/$pgInstaller" -OutFile $pgInstaller
            Start-Process -FilePath $pgInstaller -ArgumentList "/S /NOCREATECLUSTER /NOCREATESERVICE /SERVICEACCOUNT=`"NT AUTHORITY\\NetworkService`" /SERVICEPASSWORD= /INSTALLDIR=`"C:\\Program Files\\PostgreSQL\\16`"" -Wait
          }

          # Create DB user and database, ignoring errors if exist
          & "$pgPath" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='loginuser') THEN CREATE USER loginuser WITH PASSWORD 'securepassword'; END IF; END \$\$;" -d "template1" -U "postgres"
          & "$pgPath" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname='logindb') THEN CREATE DATABASE logindb OWNER loginuser; END IF; END \$\$;" -d "template1" -U "postgres"

          # IIS App Pool stop
          Import-Module WebAdministration
          if (Get-WebAppPoolState -Name 'LoginApi' -ErrorAction SilentlyContinue) {
            Stop-WebAppPool -Name 'LoginApi'
          }

          # Run EF Core migrations
          cd $using:deployPath
          dotnet tool uninstall --global dotnet-ef -Error
