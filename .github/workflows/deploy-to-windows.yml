name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    runs-on: windows-latest

    env:
      EC2_HOST_WINDOWS: ${{ secrets.EC2_HOST_WINDOWS }}
      EC2_ADMIN_PASSWORD: ${{ secrets.EC2_ADMIN_PASSWORD }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build and Publish Artifact
        shell: pwsh
        run: |
          dotnet restore LoginApi.csproj
          dotnet publish LoginApi.csproj -c Release -o ./publish

      - name: Upload publish directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: loginapi-publish
          path: ./publish
          retention-days: 1

      - name: Install Posh-SSH Module
        shell: pwsh
        run: |
          Install-Module -Name Posh-SSH -Force -Scope CurrentUser

      - name: Deploy and Inspect Artifact on EC2
        shell: pwsh
        run: |
          $remoteHost = $env:EC2_HOST_WINDOWS
          if (-not $remoteHost) {
              throw "‚ùå EC2_HOST_WINDOWS is not set. Check GitHub secrets."
          }

          $username = "Administrator"
          $password = $env:EC2_ADMIN_PASSWORD
          $deployPath = "C:\inetpub\wwwroot\LoginApi"
          $artifactPath = "C:\Users\Administrator\Artifacts"
          $artifactZip = "$artifactPath\loginapi.zip"
          $tempExtract = "C:\Temp\LoginApiExtract"
          $appPool = "LoginApiAppPool"
          $GhToken = $env:GH_TOKEN
          $RepoOwner = "${{ github.repository_owner }}"
          $RepoName = "${{ github.event.repository.name }}"
          $RunId = "${{ github.run_id }}"
          $ArtifactName = "loginapi-publish"

          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

          Write-Host "üîê Establishing SSH session to $remoteHost..."
          $session = New-SSHSession -HostName $remoteHost -Credential $credential -AcceptKey -ConnectionTimeout 30000 -ErrorAction Stop

          $finalCommand = @"
          try {
              `$DeployPath = '$deployPath'
              `$ArtifactPath = '$artifactPath'
              `$ArtifactZip = '$artifactZip'
              `$TempExtract = '$tempExtract'
              `$AppPool = '$appPool'
              `$GhToken = '$GhToken'
              `$RepoOwner = '$RepoOwner'
              `$RepoName = '$RepoName'
              `$RunId = '$RunId'
              `$ArtifactName = '$ArtifactName'
              `$URL = "https://api.github.com/repos/`$RepoOwner/`$RepoName/actions/runs/`$RunId/artifacts"
              `$HEADERS = @{
                  "Authorization" = "token `$GhToken";
                  "Accept" = "application/vnd.github.v3+json";
              }

              Install-WindowsFeature -Name Web-Server -IncludeManagementTools

              if (-not (Test-Path `$ArtifactPath)) {
                  New-Item -ItemType Directory -Path `$ArtifactPath -Force
              }

              `$RESPONSE = Invoke-RestMethod -Uri `$URL -Headers `$HEADERS
              `$ARTIFACT = `$RESPONSE.artifacts | Where-Object { `$_.name -eq `$ArtifactName }
              if (-not `$ARTIFACT) { throw "Artifact `$ArtifactName not found." }

              `$DOWNLOAD_URL = `$ARTIFACT.archive_download_url
              Invoke-WebRequest -Uri `$DOWNLOAD_URL -Headers `$HEADERS -OutFile `$ArtifactZip

              if (-not (Test-Path `$TempExtract)) {
                  New-Item -ItemType Directory -Path `$TempExtract -Force
              }

              Add-Type -AssemblyName System.IO.Compression.FileSystem
              [System.IO.Compression.ZipFile]::ExtractToDirectory(`$ArtifactZip, `$TempExtract)

              `$dllPath = Get-ChildItem -Path `$TempExtract -Recurse -Filter "LoginApi.dll" | Select-Object -First 1
              if (`$dllPath) {
                  `$sourceFolder = `$dllPath.Directory.FullName
                  if (-not (Test-Path `$DeployPath)) {
                      New-Item -ItemType Directory -Path `$DeployPath -Force
                  }
                  Get-ChildItem -Path "`$sourceFolder\*" -Force | Move-Item -Destination `$DeployPath -Force
              }

              Import-Module WebAdministration
              if (-not (Test-Path IIS:\AppPools\$AppPool)) {
                  New-WebAppPool -Name `$AppPool
                  Set-ItemProperty IIS:\AppPools\$AppPool -Name "managedRuntimeVersion" -Value ""
              }
              if (-not (Test-Path IIS:\Sites\Default Web Site\LoginApi)) {
                  New-WebApplication -Site "Default Web Site" -Name "LoginApi" -PhysicalPath `$DeployPath -ApplicationPool `$AppPool
              }
              Restart-WebAppPool -Name `$AppPool

              Push-Location `$DeployPath
              if (Test-Path "LoginApi.dll") {
                  dotnet LoginApi.dll migrate
              }
              Pop-Location
          } catch {
              Write-Host "‚ùå Remote script error: $($_.Exception.Message)"
          }
          "@

          $response = Invoke-SSHCommand -SshSession $session -Command $finalCommand
          Write-Host "üîß Remote command output:"
          $response.Output
          Write-Host "üîö Exit status: $($response.ExitStatus)"

          Remove-SSHSession -SshSession $session
