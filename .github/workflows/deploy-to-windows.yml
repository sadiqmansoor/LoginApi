name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    runs-on: windows-latest
    
    steps:
      # 1. Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Setup .NET SDK 8.x
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 3. Restore, Build, and Publish the project
      - name: Build and Publish project
        shell: pwsh
        run: |
          dotnet restore LoginApi.csproj
          dotnet publish LoginApi.csproj -c Release -o ./publish

      # The upload-artifact step is useful for review, but typically skipped in a direct deploy workflow
      # Keeping it here as requested in the original script.
      - name: Upload artifact for review
        uses: actions/upload-artifact@v4
        with:
          name: loginapi-publish
          path: ./publish

      # 4. Deploy files using SCP
      # This replaces the complex and incomplete artifact download script.
      - name: Deploy files to Windows EC2 (SCP)
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ vars.EC2_HOST_WINDOWS }}
          username: Administrator
          key: ${{ secrets.EC2_SSH_KEY_WINDOWS }}
          port: 22
          # Source is the output folder created during 'dotnet publish'
          source: "./publish/*" 
          # Target path on the Windows EC2 server
          target: C:/inetpub/wwwroot/LoginApi/
          overwrite: true
          # Note: We must use 'Administrator' as the username for EC2 Windows

      # 5. Run remote command to manage the application (e.g., restart IIS or stop/start the console app)
      - name: Restart Application via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_HOST_WINDOWS }}
          username: Administrator
          key: ${{ secrets.EC2_SSH_KEY_WINDOWS }}
          port: 22
          script: |
            # PowerShell commands to stop and start the application on the remote server
            # NOTE: Replace 'YourServiceName' with the actual Windows Service name for your app, 
            # or if it's a simple console app, run the executable directly.
            
            # Example for an IIS/Kestrel-hosted service:
            $ServiceName = "LoginApiAppPool"
            
            # Restart Application Pool (if hosted in IIS)
            # You must have IIS WebAdministration module installed on the EC2 instance
            Invoke-Command -ComputerName localhost -ScriptBlock {
                Import-Module WebAdministration
                Restart-WebAppPool -Name $using:ServiceName -Force
                Write-Host "Application pool '$using:ServiceName' restarted."
            } 
            
            # OR, if running as a console application (e.g., using NSSM to manage a service):
            # Stop-Service -Name "LoginApi-Service"
            # Start-Service -Name "LoginApi-Service"
            
            Write-Host "Deployment complete."
