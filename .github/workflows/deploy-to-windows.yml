name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    # Use the Windows runner
    runs-on: windows-latest
    
    steps:
      # 1. Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Setup .NET SDK 8.x
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 3. Restore, Build, and Publish the project
      - name: Build, Publish, and Compress Artifact
        shell: pwsh
        run: |
          dotnet restore LoginApi.csproj
          # Publish the application to the ./publish directory
          dotnet publish LoginApi.csproj -c Release -o ./publish
          # Create a single zip file for easier, atomic transfer
          Compress-Archive -Path ./publish/* -DestinationPath ./loginapi.zip -Force

      # 4. Upload artifact for review
      - name: Upload artifact for review
        uses: actions/upload-artifact@v4
        with:
          name: loginapi-publish
          path: ./loginapi.zip

      # NOTE: Removed Step 4 (Setup SSH Agent) as we are using password authentication.
      # The appleboy actions handle the connection and password securely.

      # 5. File Transfer using Password Auth
      - name: Transfer Files via SCP (Password Auth)
        # We use appleboy/scp-action because it handles password injection securely and reliably.
        # This action runs in a secure, isolated container on the runner.
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ vars.EC2_HOST_WINDOWS }}
          username: Administrator
          # Use the newly created secret for the password
          password: ${{ secrets.EC2_ADMIN_PASSWORD }}
          port: 22
          source: "./loginapi.zip" 
          # Target path on the Windows EC2 server
          target: C:/inetpub/wwwroot/LoginApi/
          overwrite: true
          # Note: We must use 'Administrator' as the username for EC2 Windows

      # 6. Run remote command to extract files and manage the application
      - name: Extract Files and Restart Application via SSH (Password Auth)
        # Use appleboy/ssh-action to execute the remote PowerShell script securely.
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_HOST_WINDOWS }}
          username: Administrator
          # Use the password for authentication
          password: ${{ secrets.EC2_ADMIN_PASSWORD }}
          port: 22
          script: |
            # Define variables using the Windows environment
            $DEPLOY_PATH="C:\inetpub\wwwroot\LoginApi"
            $ZIP_FILE="$DEPLOY_PATH\loginapi.zip"
            $APP_POOL="LoginApiAppPool"

            # Create directory if it doesn't exist
            if (-not (Test-Path -Path $DEPLOY_PATH)) { New-Item -ItemType Directory -Path $DEPLOY_PATH -Force };
            
            # Extract the zip file (overwrites existing files)
            Expand-Archive -Path $ZIP_FILE -DestinationPath $DEPLOY_PATH -Force;
            Remove-Item -Path $ZIP_FILE;

            # Restart Application Pool (Requires IIS WebAdministration Module on EC2)
            Import-Module WebAdministration; 
            Restart-WebAppPool -Name $APP_POOL -Force;
            Write-Host 'Deployment successful and App Pool restarted.'
