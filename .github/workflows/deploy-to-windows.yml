name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    runs-on: windows-latest

    env:
      EC2_HOST_WINDOWS: ${{ vars.EC2_HOST_WINDOWS }}
      EC2_ADMIN_PASSWORD: ${{ secrets.EC2_ADMIN_PASSWORD }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET on runner
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build and Publish Artifact
        shell: pwsh
        run: |
          dotnet restore LoginApi.csproj
          dotnet publish LoginApi.csproj -c Release -o ./publish

      - name: Upload publish directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: loginapi-publish
          path: ./publish
          retention-days: 1

      - name: Install Posh-SSH Module
        shell: pwsh
        run: Install-Module -Name Posh-SSH -Force -Scope CurrentUser

      - name: Install and Deploy on EC2
        shell: pwsh
        run: |
          $remoteHost = $env:EC2_HOST_WINDOWS
          $username = "Administrator"
          $password = $env:EC2_ADMIN_PASSWORD
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

          $session = New-SSHSession -HostName $remoteHost -Credential $credential -AcceptKey -ConnectionTimeout 30000

          $deployScript = @'
          # Install Chocolatey if necessary
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            iex ((New-Object System.Net.WebClient).DownloadString("https://community.chocolatey.org/install.ps1"))
          }
          # Install .NET SDK and Runtime
          choco install dotnet-sdk --version=8.0.100 -y
          choco install dotnet-runtime --version=8.0.0 -y

          # Confirm dotnet is available and reload environment if necessary
          & cmd /c "refreshenv"

          # Download and extract artifact using GitHub API with proper headers
          $artifactZip = "C:\Artifacts\loginapi.zip"
          $tempExtract = "C:\Temp\LoginApiExtract"
          $deployPath = "C:\inetpub\wwwroot\LoginApi"
          $appPool = "LoginApiAppPool"

          # Create directories
          if (-not (Test-Path $artifactZip)) { New-Item -ItemType Directory -Path (Split-Path $artifactZip) -Force }
          if (-not (Test-Path $tempExtract)) { New-Item -ItemType Directory -Path $tempExtract -Force }
          if (-not (Test-Path $deployPath)) { New-Item -ItemType Directory -Path $deployPath -Force }

          # Prepare API call for artifacts (use passed environment variables for URL and token)
          $repoOwner = "${{ github.repository_owner }}"
          $repoName = "${{ github.repository.name }}"
          $runId = "${{ github.run_id }}"
          $token = "${{ secrets.GH_TOKEN }}"
          $headers = @{ Authorization = "token $token"; Accept = "application/vnd.github.v3+json" }
          $url = "https://api.github.com/repos/$repoOwner/$repoName/actions/runs/$runId/artifacts"
          $response = Invoke-RestMethod -Uri $url -Headers $headers
          $artifact = $response.artifacts | Where-Object { $_.name -eq 'loginapi-publish' }
          if (-not $artifact) { throw "Artifact not found" }
          $downloadUrl = $artifact.archive_download_url
          Invoke-WebRequest -Uri $downloadUrl -Headers $headers -OutFile $artifactZip

          # Extract artifact
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($artifactZip, $tempExtract, $true)

          # Copy artifact files to deploy path
          Copy-Item -Path "$tempExtract\*" -Destination $deployPath -Recurse -Force

          # Setup IIS Application Pool and Web App
          Import-Module WebAdministration
          if (-not (Test-Path IIS:\AppPools\$appPool)) {
            New-WebAppPool -Name $appPool
            Set-ItemProperty IIS:\AppPools\$appPool -Name "managedRuntimeVersion" -Value ""
          }
          if (-not (Test-Path IIS:\Sites\Default Web Site\LoginApi)) {
            New-WebApplication -Site 'Default Web Site' -Name 'LoginApi' -PhysicalPath $deployPath -ApplicationPool $appPool
          }
          Restart-WebAppPool $appPool

          # Run dotnet migration command
          Push-Location $deployPath
          dotnet LoginApi.dll migrate
          Pop-Location
          '@

          $response = Invoke-SSHCommand -SshSession $session -Command $deployScript
          Write-Host "Remote Output: $($response.Output)"
          Remove-SSHSession -SshSession $session
