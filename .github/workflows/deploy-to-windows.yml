name: CI/CD for LoginApi to Windows EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy-loginapi-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build and Publish Artifact
        shell: pwsh
        run: |
          dotnet restore LoginApi.csproj
          dotnet publish LoginApi.csproj -c Release -o ./publish

      - name: Upload publish directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: loginapi-publish
          path: ./publish
          retention-days: 1

      - name: Install Posh-SSH Module
        shell: pwsh
        run: |
          Install-Module -Name Posh-SSH -Force -Scope CurrentUser

      - name: Deploy and Inspect Artifact on EC2
        shell: pwsh
        run: |
          $remoteHost = "${{ vars.EC2_HOST_WINDOWS }}"
          $username = "Administrator"
          $password = "${{ secrets.EC2_ADMIN_PASSWORD }}"
          $deployPath = "C:\inetpub\wwwroot\LoginApi"
          $artifactPath = "C:\Users\Administrator\Artifacts"
          $artifactZip = "$artifactPath\loginapi.zip"
          $appPool = "LoginApiAppPool"
          $siteName = "Default Web Site"
          $appName = "LoginApi"
          $GhToken = "${{ secrets.GITHUB_TOKEN }}"
          $RepoOwner = "${{ github.repository_owner }}"
          $RepoName = "${{ github.event.repository.name }}"
          $RunId = "${{ github.run_id }}"
          $ArtifactName = "loginapi-publish"

          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

          Write-Host "Establishing SSH session..."
          $session = New-SSHSession -HostName $remoteHost -Credential $credential -AcceptKey -ErrorAction Stop

          $finalCommand = @"
          `$DeployPath = '$deployPath'
          `$ArtifactPath = '$artifactPath'
          `$ArtifactZip = '$artifactZip'
          `$AppPool = '$appPool'
          `$SiteName = '$siteName'
          `$AppName = '$appName'
          `$GhToken = '$GhToken'
          `$RepoOwner = '$RepoOwner'
          `$RepoName = '$RepoName'
          `$RunId = '$RunId'
          `$ArtifactName = '$ArtifactName'
          `$URL = \"https://api.github.com/repos/$RepoOwner/$RepoName/actions/runs/$RunId/artifacts\"
          `$HEADERS = @{
              \"Authorization\" = \"token `$GhToken\";
              \"Accept\" = \"application/vnd.github.v3+json\";
          }

          Install-WindowsFeature -Name Web-Server -IncludeManagementTools

          if (-not (Test-Path `$ArtifactPath)) {
              New-Item -ItemType Directory -Path `$ArtifactPath -Force
          }

          `$RESPONSE = Invoke-RestMethod -Uri `$URL -Headers `$HEADERS
          `$ARTIFACT = `$RESPONSE.artifacts | Where-Object { `$_.name -eq `$ArtifactName }
          if (-not `$ARTIFACT) { throw \"Artifact `$ArtifactName not found in the run.\" }
          `$DOWNLOAD_URL = `$ARTIFACT.archive_download_url
          Invoke-WebRequest -Uri `$DOWNLOAD_URL -Headers `$HEADERS -OutFile `$ArtifactZip

          # Clean existing deployment folder before extraction
          if (Test-Path -Path `$DeployPath) {
              Remove-Item -Path `$DeployPath\* -Recurse -Force
          } else {
              New-Item -ItemType Directory -Path `$DeployPath -Force
          }

          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory(`$ArtifactZip, `$DeployPath)

          Write-Host \"Folder tree under `$DeployPath after extraction:\"
          Get-ChildItem -Path `$DeployPath -Recurse | Select-Object FullName

          # Move all content from subfolder if LoginApi.dll is nested
          `$dllPath = Get-ChildItem -Path `$DeployPath -Recurse -Filter \"LoginApi.dll\" | Select-Object -First 1
          if (`$dllPath) {
              `$sourceFolder = `$dllPath.Directory.FullName
              Write-Host \"Found LoginApi.dll in: `$sourceFolder\"
              if (`$sourceFolder -ne `$DeployPath) {
                  Get-ChildItem -Path \"`$sourceFolder\\*\" -Force | Move-Item -Destination `$DeployPath -Force
                  Remove-Item -Path `$sourceFolder -Recurse -Force
              }
          } else {
              Write-Host \"LoginApi.dll not found in extracted artifact.\"
          }

          Write-Host \"Final contents of `$DeployPath:\"
          Get-ChildItem -Path `$DeployPath -Recurse | Select-Object FullName

          Write-Host \"Checking for required files:\"
          Write-Host \"LoginApi.dll exists: $(Test-Path \\\"$DeployPath\\LoginApi.dll\\\")\"
          Write-Host \"web.config exists: $(Test-Path \\\"$DeployPath\\web.config\\\")\"

          Import-Module WebAdministration

          # Remove existing IIS application if exists to ensure fresh deployment
          if (Test-Path IIS:\\Sites\\`$SiteName\\`$AppName) {
              Remove-WebApplication -Site `$SiteName -Name `$AppName -Confirm:\$false
              Write-Host \"Removed existing IIS application `$AppName\"
          }

          if (-not (Test-Path IIS:\\AppPools\\$AppPool)) {
              New-WebAppPool -Name `$AppPool
              Set-ItemProperty IIS:\\AppPools\\$AppPool -Name \"managedRuntimeVersion\" -Value \"\"
          }

          New-WebApplication -Site `$SiteName -Name `$AppName -PhysicalPath `$DeployPath -ApplicationPool `$AppPool
          Restart-WebAppPool -Name `$AppPool

          Write-Host \"Deployment complete. IIS App Pool restarted.\"

          # Optional: Uncomment below lines to adjust permissions (run only if permission errors occur)
          #$acl = Get-Acl -Path `$DeployPath
          #$rule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"IIS_IUSRS\",\"FullControl\",\"ContainerInherit,ObjectInherit\",\"None\",\"Allow\")
          #$acl.SetAccessRule($rule)
          #Set-Acl -Path `$DeployPath -AclObject $acl
          #Write-Host \"Adjusted permissions for IIS_IUSRS on `$DeployPath\"

          # PostgreSQL installation and migration
          `$pgInstaller = \"https://get.enterprisedb.com/postgresql/postgresql-15.5-1-windows-x64.exe\"
          `$pgExe = \"C:\\Users\\Administrator\\pginstaller.exe\"
          Invoke-WebRequest -Uri `$pgInstaller -OutFile `$pgExe
          Start-Process -FilePath `$pgExe -ArgumentList \"--mode unattended --unattendedmodeui minimal --superpassword postgres123 --prefix C:\\PostgreSQL\" -Wait

          Push-Location `$DeployPath
          if (Test-Path \"LoginApi.dll\") {
              dotnet LoginApi.dll migrate
              Write-Host \"Migration completed.\"
          } else {
              Write-Host \"Migration skipped: LoginApi.dll not found.\"
          }
          Pop-Location
          "@

          Invoke-SSHCommand -SshSession $session -Command $finalCommand
          Remove-SSHSession -SshSession $session
